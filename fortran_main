program  project
  use preparation
  use Diagonalization
  implicit none 

  real(kind=8) :: left_border, right_border
  integer :: N !number of grid points
  real(kind=8), allocatable :: grid(:), S_matrix(:, :), potential(:, :)
  real(kind=8), allocatable :: hamiltonian(:, :), eigenvectors(:, :), eigenvalues(:)
  real(kind=8) :: h
  integer :: i

  ! User input
  !print*, "What is the number of grid points?"
  !read(*,*) N
  !print*, "What is the left border?"
  !read(*,*) left_border
  !print*, "What is the right border?"
  !read(*,*) right_border 

  ! Test values
  N = 7
  left_border = 1
  right_border = 2

  allocate(grid(N), S_matrix(N, N), potential(N, N))
  grid = 0.
  S_matrix = 0.

  call DefineGrid(N, left_border, right_border, grid, h)
  print*, grid

  call build_S_matrix(N, h, S_matrix)
  do i = 1, N
    write(*, '(7F12.3)') S_matrix(i, :)
  end do

  ! Particle in a box potential (just 0 everywhere in [a,b])
  potential = 0.

  ! Now the hamiltonian is S+V and we need to solve this to obtain first values for lambda
  allocate(hamiltonian(N, N), eigenvectors(N, N), eigenvalues(N))
  eigenvectors = 0.
  eigenvalues = 0.
  hamiltonian = S_matrix + potential
  call diagonalize(hamiltonian, eigenvectors, eigenvalues)
  print*, eigenvalues
  do i = 1, N
    write(*, '(7F12.3)') eigenvectors(i, :)
  end do

  deallocate(grid, S_matrix, potential, hamiltonian, eigenvalues, eigenvectors)

  ! our grid consists of n-1 points
  ! periodic boundary conditions make sure wavefunc doesn't blow up
  ! -> in case of no potential: zero at boundaries?

end program 
