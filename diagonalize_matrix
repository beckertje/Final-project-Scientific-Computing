module Diagonalization

implicit none

private

public :: diagonalize

! Overloading:
interface diagonalize
   module procedure diagonalize_real
   module procedure diagonalize_complex 
end interface

contains
   ! Copied from last assignment
   subroutine diagonalize_real(matrix,eigenvectors,eigenvalues)

   real(kind=8), intent(in)               :: matrix(:,:)
   real(kind=8), intent(out)              :: eigenvalues(:)
   real(kind=8), intent(out), optional    :: eigenvectors(:,:)
   real(kind=8), allocatable              :: a(:,:),work(:)
   character, parameter             :: uplo='L'
   character                        :: jobz

   integer                          :: n, lda, info, lwork
   integer                          :: ILAENV

!  Determine the calculation mode
   if (present(eigenvectors)) then !if the eigenvectors are given in the subroutine call, the loop outputs jobz = 'V'
      jobz = 'V'
   else
      jobz = 'N'
   end if

!  Error checking
   if (size(matrix,1) /= size(matrix,2)) then
      print*," diagonalize assumes square matrices"
      stop "error in diagonalize routine"
   end if
   if (size(matrix,1) > size(eigenvalues)) then
      print*," dimension of eigenvalue array too small "
      stop "error in diagonalize routine"
   end if
   if (present(eigenvectors)) then
      if (size(eigenvectors,1) /= size(eigenvectors,2)) then
         print*," diagonalize assumes square matrices"
         stop "error in diagonalize routine"
      end if
      if (size(matrix,1) /= size(eigenvectors,1)) then
         print*," diagonalize assumes same size array for matrix and eigenvectors "
         stop "error in diagonalize routine"
      end if
   end if

!  Initialize and diagonalize using lapack's dsyev routine
   n = size(matrix,1)
   lda = n
   lwork = n * ( 2 + ILAENV( 1, 'DSYTRD', UPLO, N, -1, -1, -1 ))
   allocate (work(lwork))
   allocate (a(n,n))
   a = matrix

   call DSYEV( JOBZ, UPLO, N, A, LDA, eigenvalues, WORK, LWORK, INFO )

   if (present(eigenvectors)) eigenvectors = a

   end subroutine

   ! diagonalize complex matrix using ZHEEV
   subroutine diagonalize_complex(matrix,eigenvectors,eigenvalues)

    complex(kind=8), intent(in)  :: matrix(:,:) !hamiltonian
    real(kind=8), intent(out)   :: eigenvalues(:)
    complex(kind=8), intent(out), optional    :: eigenvectors(:,:)
    complex(kind=8), allocatable :: copy(:,:) 
    real(kind=8), allocatable  :: work(:), W(:)
    integer(kind=8), allocatable ::  RWORK(:)
    integer  :: N, LDA, LWMAX, INFO, LWORK

      !  Error checking
      if (size(matrix,1) /= size(matrix,2)) then
         print*," diagonalize assumes square matrices"
         stop "error in diagonalize routine"
      end if
      if (size(matrix,1) > size(eigenvalues)) then
         print*," dimension of eigenvalue array too small "
         stop "error in diagonalize routine"
      end if
      if (present(eigenvectors)) then
         if (size(eigenvectors,1) /= size(eigenvectors,2)) then
            print*," diagonalize assumes square matrices"
            stop "error in diagonalize routine"
         end if
         if (size(matrix,1) /= size(eigenvectors,1)) then
            print*," diagonalize assumes same size array for matrix and eigenvectors "
            stop "error in diagonalize routine"
         end if
      end if

   ! Parameter settings below are set according to intel website example
    N = size(matrix, dim=1) !number of rows of matrix 
    LDA = N
    LWMAX = 1000

    allocate(copy(lda,n))
    allocate(WORK(LWMAX))
    allocate(W(N), RWORK(3*N-2))
    copy = matrix

    LWORK = -1
    CALL ZHEEV( 'Vectors', 'Lower', N, copy, LDA, W, WORK, LWORK, RWORK, INFO )
    LWORK = MIN( LWMAX, INT( WORK( 1 ) ) )

    CALL ZHEEV( 'Vectors', 'Lower', N, copy, LDA, W, WORK, LWORK, RWORK, INFO )
     IF( INFO.GT.0 ) THEN
        WRITE(*,*)'The algorithm failed to compute eigenvalues.'
        STOP
     END IF

     eigenvalues = W

     if (present(eigenvectors)) eigenvectors = copy

    end subroutine diagonalize_complex
end module
